services:
  nessie-db:
    image: postgres:17
    container_name: nessie-db # Explicitly naming the container
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=nessie
      - POSTGRES_PASSWORD=nessie
      - POSTGRES_DB=nessie_catalog
    volumes:
      - nessie_db_data:/var/lib/postgresql/data
      - ./nessie-db-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nessie -d nessie_catalog"]
      interval: 10s
      timeout: 5s
      retries: 5

  nessie:
    image: projectnessie/nessie:latest
    container_name: nessie
    ports:
      - "19120:19120"
    environment:
      - NESSIE_VERSION_STORE_TYPE=JDBC
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://nessie-db:5432/nessie_catalog
      - QUARKUS_DATASOURCE_USERNAME=nessie
      - QUARKUS_DATASOURCE_PASSWORD=nessie
    depends_on:
      nessie-db:
        condition: service_healthy


  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "10000:9000"
      - "10001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

  trino-coordinator:
    image: trinodb/trino:476
    container_name: trino-coordinator
    env_file:
      - .env
    environment:
      - WWI_CONNECTION_URL=${WWI_CONNECTION_URL}
      - WWI_DW_CONNECTION_URL=${WWI_DW_CONNECTION_URL}
      - SQL_SERVER_USER=${SQL_SERVER_USER}
      - SQL_SERVER_PASSWORD=${SQL_SERVER_PASSWORD}
    ports:
      - "8080:8080"
      - "8443:8443"
    volumes:
      - ./trino/config.properties:/etc/trino/config.properties
      - ./trino/jvm.config:/etc/trino/jvm.config
      - ./trino/connectors/:/etc/trino/catalog/
      - ./trino/certs:/etc/trino/certs
    depends_on:
      - nessie
      - minio

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "xpack.security.enabled=false"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s"]
      interval: 10s
      timeout: 5s
      retries: 5

  execute-migrate-all:
    image: openmetadata/server:1.8.9
    command: "./bootstrap/openmetadata-ops.sh migrate"
    environment:
      # Database configuration using the correct variables
      DB_DRIVER_CLASS: 'org.postgresql.Driver'
      DB_SCHEME: 'postgresql'
      DB_HOST: 'nessie-db'
      DB_PORT: '5432'
      DB_USER: 'nessie'
      DB_USER_PASSWORD: 'nessie'
      OM_DATABASE: 'openmetadata_db' # This will be the new DB created inside the postgres container
      # Search Configuration
      SEARCH_TYPE: 'elasticsearch'
      ELASTICSEARCH_HOST: 'elasticsearch'
      ELASTICSEARCH_PORT: '9200'
      ELASTICSEARCH_SCHEME: 'http'
    depends_on:
      nessie-db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  openmetadata-server:
    image: openmetadata/server:1.8.9
    container_name: openmetadata-server
    environment:
      # Database configuration using the correct variables
      DB_DRIVER_CLASS: 'org.postgresql.Driver'
      DB_SCHEME: 'postgresql'
      DB_HOST: 'nessie-db'
      DB_PORT: '5432'
      DB_USER: 'nessie'
      DB_USER_PASSWORD: 'nessie'
      OM_DATABASE: 'openmetadata_db'
      # Search Configuration
      SEARCH_TYPE: 'elasticsearch'
      ELASTICSEARCH_HOST: 'elasticsearch'
      ELASTICSEARCH_PORT: '9200'
      ELASTICSEARCH_SCHEME: 'http'
      # Authorizer Configuration
      AUTHORIZER_ADMIN_PRINCIPALS: '[admin]'
      AUTHENTICATION_PROVIDER: 'basic'
      PIPELINE_SERVICE_CLIENT_ENDPOINT: http://openmetadata-ingestion:8080
      SERVER_HOST_API_URL: http://openmetadata-server:8585/api
    ports:
      - "8585:8585"
      - "8586:8586"
    restart: always
    depends_on:
      execute-migrate-all:
        condition: service_completed_successfully
      nessie-db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider",  "http://localhost:8586/healthcheck" ]
      interval: 10s
      timeout: 5s
      retries: 5

  openmetadata-ingestion:
    image: openmetadata/ingestion:1.8.9
    container_name: openmetadata-ingestion
    environment:
      AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session"
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      OPENMETADATA_SERVER_URL: http://openmetadata-server:8585/api
      DB_HOST: ${AIRFLOW_DB_HOST:-nessie-db}
      DB_PORT: ${AIRFLOW_DB_PORT:-5432}
      AIRFLOW_DB: ${AIRFLOW_DB:-airflow_db}
      DB_USER: ${AIRFLOW_DB_USER:-nessie}
      DB_SCHEME: ${AIRFLOW_DB_SCHEME:-postgresql+psycopg2}
      DB_PASSWORD: ${AIRFLOW_DB_PASSWORD:-nessie}
      # extra connection-string properties for the database
      # EXAMPLE 
      # require SSL (only for Postgres)
      # properties: "?sslmode=require"
      DB_PROPERTIES: ${AIRFLOW_DB_PROPERTIES:-}
    entrypoint: /bin/bash
    command:
      - "/opt/airflow/ingestion_dependency.sh"
    volumes:
      - ./base_dbt:/opt/dbt
    expose:
      - 8080
    ports:
      - "8081:8080"
    depends_on:
      openmetadata-server:
        condition: service_started
      nessie-db:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    restart: always
volumes:
  nessie_db_data:
  minio_data:
  elasticsearch_data: